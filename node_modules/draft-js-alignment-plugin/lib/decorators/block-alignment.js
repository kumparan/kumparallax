'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Get a component's display name
var getDisplayName = function getDisplayName(WrappedComponent) {
  var component = WrappedComponent.WrappedComponent || WrappedComponent;
  return component.displayName || component.name || 'Component';
};

exports.default = function (_ref) {
  var theme = _ref.theme;
  return function (WrappedComponent) {
    var _class, _temp2;

    return _temp2 = _class = function (_Component) {
      _inherits(BlockAlignmentDecorator, _Component);

      function BlockAlignmentDecorator() {
        var _Object$getPrototypeO;

        var _temp, _this, _ret;

        _classCallCheck(this, BlockAlignmentDecorator);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_Object$getPrototypeO = Object.getPrototypeOf(BlockAlignmentDecorator)).call.apply(_Object$getPrototypeO, [this].concat(args))), _this), _this.state = {
          alignment: null
        }, _this.align = function (alignment) {
          var setEntityData = _this.props.blockProps.setEntityData;

          _this.setState({ alignment: alignment });
          setEntityData({ alignment: alignment });
        }, _temp), _possibleConstructorReturn(_this, _ret);
      }
      // Statics


      // Default props


      // Perform alignment


      _createClass(BlockAlignmentDecorator, [{
        key: 'render',


        // Render
        value: function render() {
          var _this2 = this;

          var _props = this.props;
          var blockProps = _props.blockProps;
          var className = _props.className;


          var alignment = this.state.alignment || blockProps.entityData.alignment || 'center';

          // Compose actions for the toolbar
          var actions = [{
            active: alignment === 'left',
            button: _react2.default.createElement(
              'span',
              null,
              'L'
            ),
            toggle: function toggle() {
              return _this2.align('left');
            },
            label: 'Align left'
          }, {
            active: alignment === 'center',
            button: _react2.default.createElement(
              'span',
              null,
              'C'
            ),
            toggle: function toggle() {
              return _this2.align('center');
            },
            label: 'Align center'
          }, {
            active: alignment === 'right',
            button: _react2.default.createElement(
              'span',
              null,
              'R'
            ),
            toggle: function toggle() {
              return _this2.align('right');
            },
            label: 'Align right'
          }];

          // Get the className
          var newClassName = [className, theme[alignment || 'center']].filter(function (p) {
            return p;
          });

          // Get the wrapped component and pass alignment props
          return _react2.default.createElement(WrappedComponent, _extends({}, this.props, {
            className: newClassName.join(' '),
            alignmentClassName: '' + theme[alignment],
            alignment: alignment,
            actions: actions
          }));
        }
      }]);

      return BlockAlignmentDecorator;
    }(_react.Component), _class.displayName = 'BlockAlignment(' + getDisplayName(WrappedComponent) + ')', _class.WrappedComponent = WrappedComponent.WrappedComponent || WrappedComponent, _class.defaultProps = {
      draggable: true,
      readOnly: false
    }, _temp2;
  };
};
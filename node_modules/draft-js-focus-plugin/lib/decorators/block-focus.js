'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Get a component's display name
var getDisplayName = function getDisplayName(WrappedComponent) {
  var component = WrappedComponent.WrappedComponent || WrappedComponent;
  return component.displayName || component.name || 'Component';
};

var findParentNode = function findParentNode(node, filter) {
  if (!node) return null;
  return node.parentElement && filter(node.parentElement) ? node.parentElement : findParentNode(node.parentElement, filter);
};

exports.default = function (_ref) {
  var theme = _ref.theme;
  var store = _ref.store;
  return function (WrappedComponent) {
    var _class, _temp2;

    return _temp2 = _class = function (_Component) {
      _inherits(BlockFocusDecorator, _Component);

      function BlockFocusDecorator() {
        var _Object$getPrototypeO;

        var _temp, _this, _ret;

        _classCallCheck(this, BlockFocusDecorator);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_Object$getPrototypeO = Object.getPrototypeOf(BlockFocusDecorator)).call.apply(_Object$getPrototypeO, [this].concat(args))), _this), _this.setFocus = function () {
          var blockProps = _this.props.blockProps;

          blockProps.setFocus();
        }, _this.unsetFocus = function (direction, event) {
          var unsetFocus = _this.props.blockProps.unsetFocus;

          unsetFocus(direction, event);
        }, _this.removeBlock = function () {
          var removeBlock = _this.props.blockProps.removeBlock;

          removeBlock();
        }, _this.releaseOnArrowKey = function (event) {
          if (event.keyCode === 38) {
            event.stopPropagation();
            _this.unsetFocus('up', event);
          } else if (event.keyCode === 40) {
            event.stopPropagation();
            _this.unsetFocus('down', event);
          } else if (event.keyCode === 8) {
            event.stopPropagation();
            event.preventDefault();
            _this.unsetFocus('down', event);
            _this.removeBlock();
          }
        }, _this.releaseOnMouseDown = function () {
          if (!findParentNode(event.target, function (x) {
            return x === _this.DOMNode;
          })) {
            _this.unsetFocus();
          }
        }, _this.mouseDown = function (event) {
          var isFocused = _this.props.blockProps.isFocused;

          if (isFocused) return;
          event.stopPropagation();
          _this.setFocus();
        }, _temp), _possibleConstructorReturn(_this, _ret);
      }
      // Statics


      _createClass(BlockFocusDecorator, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
          store.addType(this.props.block.type);
          this.componentDidUpdate();
        }
      }, {
        key: 'componentWillUpdate',
        value: function componentWillUpdate() {
          if (this.DOMNode) {
            this.DOMNode.removeEventListener('click', this.mouseDown);
            // document.removeEventListener('keydown', this.releaseOnArrowKey);
            // document.removeEventListener('mousedown', this.releaseOnMouseDown);
          }
          if (this.ReactRoot) {
            document.removeEventListener('keydown', this.releaseOnArrowKey);
            this.ReactRoot.removeEventListener('mousedown', this.releaseOnMouseDown);
          }
        }
      }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate() {
          this.DOMNode = _reactDom2.default.findDOMNode(this);
          this.ReactRoot = document.querySelector('[data-reactroot]');
          var _props$blockProps = this.props.blockProps;
          var pluginEditor = _props$blockProps.pluginEditor;
          var isFocused = _props$blockProps.isFocused;
          var getReadOnly = pluginEditor.getReadOnly;


          if (this.DOMNode && !getReadOnly()) {
            this.DOMNode.addEventListener('click', this.mouseDown);
            if (isFocused && this.ReactRoot) {
              // document.addEventListener('keydown', this.releaseOnArrowKey);
              // document.addEventListener('mousedown', this.releaseOnMouseDown);
              document.addEventListener('keydown', this.releaseOnArrowKey);
              this.ReactRoot.addEventListener('mousedown', this.releaseOnMouseDown);
            }
          }
        }
      }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
          var isFocused = this.props.blockProps.isFocused;

          this.componentWillUpdate();
          if (isFocused) {
            this.unsetFocus();
          }
        }
      }, {
        key: 'render',
        value: function render() {
          var _props = this.props;
          var blockProps = _props.blockProps;
          var className = _props.className;
          var isFocused = blockProps.isFocused;


          var newClassName = [className, isFocused ? theme.focused : null].filter(function (p) {
            return p;
          });

          return _react2.default.createElement(WrappedComponent, _extends({}, this.props, { className: newClassName.join(' '), isFocused: isFocused, setFocus: this.setFocus, focusClassName: isFocused ? theme.focused : '' }));
        }
      }]);

      return BlockFocusDecorator;
    }(_react.Component), _class.displayName = 'BlockFocus(' + getDisplayName(WrappedComponent) + ')', _class.WrappedComponent = WrappedComponent.WrappedComponent || WrappedComponent, _temp2;
  };
};
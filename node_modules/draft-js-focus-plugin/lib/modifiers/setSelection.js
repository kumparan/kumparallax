'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _draftJs = require('draft-js');

var findParentNode = function findParentNode(node, filter) {
  if (!node) return null;
  return node.parentElement && filter(node.parentElement) ? node.parentElement : findParentNode(node.parentElement, filter);
};

// Set selection of editor to next/previous block

exports.default = function (store, getEditorState, setEditorState, previousActiveBlock, mode, event) {
  var selectionKey = previousActiveBlock ? previousActiveBlock.get('key') : getEditorState().getSelection().getAnchorKey();
  var editorState = getEditorState();
  var activeBlock = mode === 'up' ? editorState.getCurrentContent().getBlockBefore(selectionKey) : editorState.getCurrentContent().getBlockAfter(selectionKey);

  if (activeBlock && activeBlock.get('key') === selectionKey) {
    return undefined;
  }

  if (event) {
    var atLimit = false;
    if (window.getSelection) {
      var sel = window.getSelection();
      if (sel.rangeCount) {
        var selRange = sel.getRangeAt(0);
        var testRange = selRange.cloneRange();
        // Get parent node for orientation
        var parent = findParentNode(sel.anchorNode, function (node) {
          return node.hasAttribute('data-block');
        });
        testRange.selectNodeContents(parent);

        if (mode === 'up') {
          testRange.setEnd(selRange.startContainer, selRange.startOffset);
          var toleranced = Math.abs(selRange.getBoundingClientRect().top - parent.getBoundingClientRect().top);
          atLimit = testRange.toString() === '' || toleranced < 10;
        } else {
          testRange.setStart(selRange.endContainer, selRange.endOffset);
          var _toleranced = Math.abs(selRange.getBoundingClientRect().bottom - parent.getBoundingClientRect().bottom);
          atLimit = testRange.toString() === '' || _toleranced < 10;
        }
      }
    } /* else if (document.selection && document.selection.type !== 'Control') {
       const selRange = document.selection.createRange();
       const testRange = selRange.duplicate();
       const parent = findParentNode(selRange.anchorNode, x => x.hasAttribute('data-block'));
        testRange.moveToElementText(parent);
       testRange.setEndPoint('EndToStart', selRange);
       info.atStart = (testRange.text === '');
        testRange.moveToElementText(parent);
       testRange.setEndPoint('StartToEnd', selRange);
       info.atEnd = (testRange.text === '');
      }*/

    if (activeBlock && store.types[activeBlock.get('type')] && atLimit) {
      event.preventDefault();
      setEditorState(_draftJs.EditorState.forceSelection(editorState, new _draftJs.SelectionState({
        anchorKey: activeBlock.get('key'),
        anchorOffset: activeBlock.get('length') || 0,
        focusKey: activeBlock.get('key'),
        focusOffset: activeBlock.get('length') || 0,
        isBackward: false
      })));
      return activeBlock;
    }
  }return undefined;
};
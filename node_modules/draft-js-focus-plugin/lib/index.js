'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FocusDecoratorStyles = exports.FocusDecorator = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _setSelection = require('./modifiers/setSelection');

var _setSelection2 = _interopRequireDefault(_setSelection);

var _blockFocus = require('./decorators/block-focus');

var _blockFocus2 = _interopRequireDefault(_blockFocus);

var _draftJs = require('draft-js');

var _style = {
  "focused": "draftJsEmojiPlugin__focused__3Mksn"
};

var _style2 = _interopRequireDefault(_style);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var defaultTheme = _extends({}, _style2.default);
var store = {
  types: {},
  addType: function addType(type) {
    store.types[type] = true;
  }
};

var focusPlugin = function focusPlugin(config) {
  var theme = config.theme ? config.theme : defaultTheme;
  var activeBlock = null;
  return {
    theme: theme,
    // Wrap all block-types in block-focus decorator
    blockRendererFn: function blockRendererFn(contentBlock, _ref) {
      var getEditorState = _ref.getEditorState;
      var setEditorState = _ref.setEditorState;
      var setReadOnly = _ref.setReadOnly;
      var getReadOnly = _ref.getReadOnly;

      var readOnly = getReadOnly();
      var setFocus = function setFocus() {
        if (readOnly) return;
        if (!activeBlock || activeBlock.get('key') !== contentBlock.get('key')) {
          // Set active block to current block
          activeBlock = contentBlock;
          // Force selection to move to current block
          setEditorState(_draftJs.EditorState.forceSelection(getEditorState(), new _draftJs.SelectionState({
            anchorKey: activeBlock.get('key'),
            anchorOffset: activeBlock.get('length') || 0,
            focusKey: activeBlock.get('key'),
            focusOffset: activeBlock.get('length') || 0,
            hasFocus: true,
            isBackward: false
          })));
          setReadOnly(true);
        }
      };
      var unsetFocus = function unsetFocus(direction, event) {
        if (readOnly) return;

        setReadOnly(false);
        if (direction) {
          activeBlock = (0, _setSelection2.default)(store, getEditorState, setEditorState, contentBlock, direction, event);
          setEditorState(_draftJs.EditorState.forceSelection(getEditorState(), getEditorState().getSelection()));
          if (activeBlock) {
            setTimeout(function () {
              setReadOnly(true);
            }, 1);
          }
        } else {
          activeBlock = undefined;
          setEditorState(_draftJs.EditorState.forceSelection(getEditorState(), getEditorState().getSelection()));
        }
      };
      var isFocused = !readOnly && activeBlock && contentBlock.get('key') === activeBlock.get('key');

      // Return the decorator and feed it theme and above properties
      return {
        props: {
          unsetFocus: unsetFocus, isFocused: isFocused, setFocus: setFocus
        }
      };
    },
    // Handle down/up arrow events and set activeBlock/selection if necessary
    onDownArrow: function onDownArrow(event, _ref2) {
      var getEditorState = _ref2.getEditorState;
      var setEditorState = _ref2.setEditorState;
      var setReadOnly = _ref2.setReadOnly;

      activeBlock = (0, _setSelection2.default)(store, getEditorState, setEditorState, activeBlock, 'down', event);
      setReadOnly(activeBlock && store.types[activeBlock.get('type')]);
    }, onUpArrow: function onUpArrow(event, _ref3) {
      var getEditorState = _ref3.getEditorState;
      var setEditorState = _ref3.setEditorState;
      var setReadOnly = _ref3.setReadOnly;

      activeBlock = (0, _setSelection2.default)(store, getEditorState, setEditorState, activeBlock, 'up', event);
      setReadOnly(activeBlock && store.types[activeBlock.get('type')]);
    }
  };
};

exports.default = focusPlugin;
var FocusDecorator = exports.FocusDecorator = (0, _blockFocus2.default)({ theme: _style2.default, store: store });
var FocusDecoratorStyles = exports.FocusDecoratorStyles = _style2.default;
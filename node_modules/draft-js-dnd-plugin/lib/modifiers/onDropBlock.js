'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = onDropBlock;

var _addBlock = require('./addBlock');

var _addBlock2 = _interopRequireDefault(_addBlock);

var _removeBlock = require('./removeBlock');

var _removeBlock2 = _interopRequireDefault(_removeBlock);

var _draftJs = require('draft-js');

var _constants = require('../constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function onDropBlock(_ref) {
  var handleDefaultData = _ref.handleDefaultData;

  return function onDropBlockInner(selection, dataTransfer, isInternal, _ref2) {
    var getEditorState = _ref2.getEditorState;
    var setEditorState = _ref2.setEditorState;

    var state = getEditorState();

    // Get data 'text' (anything else won't move the cursor) and expecting kind of data (text/key)
    var raw = dataTransfer.data.getData('text');
    var data = raw ? raw.split(':') : [];

    if (data.length !== 2) {
      return undefined;
    }

    // Existing block dropped
    if (data[0] === _constants.DRAFTJS_BLOCK_KEY) {
      var blockKey = data[1];

      // Get content, selection, block
      var block = state.getCurrentContent().getBlockForKey(blockKey);
      var editorStateAfterInsert = (0, _addBlock2.default)(state, selection, block.getType(), _draftJs.Entity.get(block.getEntityAt(0)).data);
      setEditorState((0, _removeBlock2.default)(editorStateAfterInsert, blockKey));
    }

    // New block dropped
    if (data[0] === _constants.DRAFTJS_BLOCK_TYPE) {
      var blockType = data[1];

      // Get content, selection, block
      var _editorStateAfterInsert = (0, _addBlock2.default)(state, selection, blockType, handleDefaultData ? handleDefaultData(blockType) : {});
      setEditorState(_editorStateAfterInsert);
    }

    return true;
  };
}
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _constants = require('../constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Get a component's display name
var getDisplayName = function getDisplayName(WrappedComponent) {
  var component = WrappedComponent.WrappedComponent || WrappedComponent;
  return component.displayName || component.name || 'Component';
};

// Export

exports.default = function (WrappedComponent) {
  var _class, _temp2;

  var pluginOptions = WrappedComponent.pluginOptions;


  return _temp2 = _class = function (_Component) {
    _inherits(BlockDraggableDecorator, _Component);

    function BlockDraggableDecorator() {
      var _Object$getPrototypeO;

      var _temp, _this, _ret;

      _classCallCheck(this, BlockDraggableDecorator);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_Object$getPrototypeO = Object.getPrototypeOf(BlockDraggableDecorator)).call.apply(_Object$getPrototypeO, [this].concat(args))), _this), _this.startDrag = function (event) {
        var allow = _this.props.draggable && !_this.props.readOnly;
        if (!allow) return;
        event.dataTransfer.dropEffect = 'move'; // eslint-disable-line no-param-reassign
        // Declare data and give info that its an existing key and a block needs to be moved
        event.dataTransfer.setData('text', _constants.DRAFTJS_BLOCK_KEY + ':' + _this.props.block.key);
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }
    // Statics


    // Default props


    // Handle start-drag and set dataTransfer data with blockKey


    _createClass(BlockDraggableDecorator, [{
      key: 'render',
      value: function render() {
        var _props = this.props;
        var draggable = _props.draggable;
        var blockProps = _props.blockProps;

        var readOnly = blockProps.pluginEditor.getReadOnly();

        // Check if pluginOptions.customHandleDnd != true and add a div to markup
        /* if (!pluginOptions || pluginOptions.customHandleDnd !== true) {
          return (
            <div onDragStart={this.startDrag} draggable={draggable}>
              <WrappedComponent {...this.props} />
            </div>
          );
        }*/

        // In case pluginOptions.customHandleDnd == true let component handle onDragStart
        return _react2.default.createElement(WrappedComponent, _extends({}, this.props, { onDragStart: !readOnly ? this.startDrag : undefined, draggable: !readOnly && draggable }));
      }
    }]);

    return BlockDraggableDecorator;
  }(_react.Component), _class.displayName = 'BlockDraggable(' + getDisplayName(WrappedComponent) + ')', _class.pluginOptions = pluginOptions, _class.WrappedComponent = WrappedComponent.WrappedComponent || WrappedComponent, _class.defaultProps = {
    draggable: true,
    readOnly: false
  }, _temp2;
};